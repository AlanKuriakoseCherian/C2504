Problem Statement: Patient Vital Signs Tracker
- Define a class: `VitalSigns` with the following properties:
- `PatientID` (integer)
- `HeartRate` (integer, beats per minute)
- `BloodPressure` (string, systolic/diastolic)
- `Temperature` (double, in Celsius)
- Tasks:
1. Data Collection:
- Read N `vitalSigns` from the keyboard.
2. Find Patient with Lowest Heart Rate:
- Display the patient with the lowest heart rate.
Solve in time complexity of O(N).
Dont use built-in C# sorting or LINQ.
3. Find Second Highest Temperature:
- Display the patient with the second highest temperature.
Solve in time complexity of O(N).
Dont use built-in C# sorting or LINQ.
4. Sort by Blood Pressure (systolic):
- Implement and call your own sorting algorithm based on the systolic value of blood pressure.
Dont use built-in C# sorting or LINQ.

using System;

class VitalSigns
{
    public int PatientID { get; set; }
    public int HeartRate { get; set; }
    public string BloodPressure { get; set; }
    public double Temperature { get; set; }

    public override string ToString()
    {
        return $"PatientID: {PatientID}, HeartRate: {HeartRate}, BloodPressure: {BloodPressure}, Temperature: {Temperature}°C";
    }
}

class Program
{
    static void Main(string[] args)
    {
        // Ask for the number of patients
        Console.Write("Enter the number of patients: ");
        int numPatients = int.Parse(Console.ReadLine());

        // Create an array to store the patient data
        VitalSigns[] vitalSigns = new VitalSigns[numPatients];

        // Collect patient data
        CollectPatientData(vitalSigns, numPatients);

        // Find and display patient with lowest heart rate
        int lowestHeartRateIndex = FindLowestHeartRateIndex(vitalSigns);
        Console.WriteLine($"Patient with the lowest heart rate: {vitalSigns[lowestHeartRateIndex]}");

        // Find and display patient with second highest temperature
        int secondHighestTempIndex = FindSecondHighestTemperatureIndex(vitalSigns);
        Console.WriteLine($"Patient with the second highest temperature: {vitalSigns[secondHighestTempIndex]}");

        // Sort patients by systolic blood pressure
        SortBySystolicBloodPressure(vitalSigns);

        // Display sorted patients
        Console.WriteLine("Patients sorted by systolic blood pressure:");
        foreach (VitalSigns patient in vitalSigns)
        {
            Console.WriteLine(patient);
        }
    }

    static void CollectPatientData(VitalSigns[] vitalSigns, int numPatients)
    {
        for (int i = 0; i < numPatients; i++)
        {
            vitalSigns[i] = new VitalSigns(); // Create a new VitalSigns object for each patient
            Console.WriteLine($"Enter details for Patient {i + 1}:");

            Console.Write("Heart Rate: ");
            vitalSigns[i].HeartRate = int.Parse(Console.ReadLine());

            Console.Write("Blood Pressure (systolic/diastolic): ");
            vitalSigns[i].BloodPressure = Console.ReadLine();

            Console.Write("Temperature (Celsius): ");
            vitalSigns[i].Temperature = double.Parse(Console.ReadLine());
        }
    }

    static int FindLowestHeartRateIndex(VitalSigns[] vitalSigns)
    {
        int lowestIndex = 0;
        for (int i = 1; i < vitalSigns.Length; i++)
        {
            if (vitalSigns[i].HeartRate < vitalSigns[lowestIndex].HeartRate)
            {
                lowestIndex = i;
            }
        }
        return lowestIndex;
    }

    static int FindSecondHighestTemperatureIndex(VitalSigns[] vitalSigns)
    {
        if (vitalSigns.Length < 2)
        {
            throw new InvalidOperationException("Need at least two patients to find the second highest temperature.");
        }

        int highestIndex = 0;
        int secondHighestIndex = 0;

        for (int i = 1; i < vitalSigns.Length; i++)
        {
            if (vitalSigns[i].Temperature > vitalSigns[highestIndex].Temperature)
            {
                secondHighestIndex = highestIndex;
                highestIndex = i;
            }
            else if (vitalSigns[i].Temperature > vitalSigns[secondHighestIndex].Temperature && i != highestIndex)
            {
                secondHighestIndex = i;
            }
        }
        return secondHighestIndex;
    }

    static void SortBySystolicBloodPressure(VitalSigns[] vitalSigns)
    {
        for (int i = 1; i < vitalSigns.Length; i++)
        {
            VitalSigns key = vitalSigns[i];
            int keySystolic = int.Parse(key.BloodPressure.Split('/')[0]);
            int j = i - 1;

            while (j >= 0 && int.Parse(vitalSigns[j].BloodPressure.Split('/')[0]) > keySystolic)
            {
                vitalSigns[j + 1] = vitalSigns[j];
                j--;
            }
            vitalSigns[j + 1] = key;
        }
    }
}
